<div id='notifications_nuovo'>
	<h4><%=t('notifications.title')%></h4>
	<p><HR>

	<!-- Notification for SKT Submission to PPP -->
	<% skt_ready = StaffAppraisal.count(:all, :conditions => ["eval1_by=? AND is_skt_submit =? AND is_skt_endorsed  IS ?", Login.current_login.staff_id, true, nil]) %>
	<% if skt_ready > 0 %>
	  <%= link_to "#{skt_ready} "+(t 'notifications.skt_ready_endorse'), { :controller => "staff_appraisals", :action => "index" } %><br>
	<% end %>

	<% skt_pyd_complete = StaffAppraisal.count(:all, :conditions => ["eval1_by=? AND is_skt_pyd_report_done =? AND skt_ppp_report  IS ?", Login.current_login.staff_id, true, nil]) %>
	<% if skt_pyd_complete > 0 %>
	  <%= link_to "#{skt_pyd_complete} " +(t 'notifications.skt_ready_annual_review'), { :controller => "staff_appraisals", :action => "index" } %><br>
	<% end %>

	<!-- Notification for Appraisal Request -->
	<% me_ppp = StaffAppraisal.count(:all, :conditions => ["eval1_by=? AND is_submit_for_evaluation =? AND is_submit_e2 IS ?", Login.current_login.staff_id, true, nil]) %>
  <% me_ppk = StaffAppraisal.count(:all, :conditions => ["eval2_by=? AND is_submit_e2 =? AND is_complete IS ?", Login.current_login.staff_id, true, nil]) %>
	<% me_eval = me_ppp + me_ppk %>
	<% if me_eval > 0 %>
        &nbsp;<%= me_eval %><%= link_to (t 'notifications.staf_appraisal_for_processing'), { :controller => "staff_appraisals", :action => "index" } %><br>
  <% end %>



	<!-- Notification for Staff Leave Application -->
  <% a = Leaveforstaff.count(:all, :conditions => ["approval1_id=? AND approval1 IS ?", Login.current_login.staff_id, nil]) %>
  <% b = Leaveforstaff.count(:all, :conditions => ["approval2_id=? AND approver2 IS ? AND approval1=?", Login.current_login.staff_id, nil, true]) %>
  <% dash_leave = a+b %>
  <% if dash_leave == 0 %>
  <% else %>
    <%= link_to "#{dash_leave} "+(t 'notifications.leave_for_approval'), { :controller => "leaveforstaffs", :action => "index" } %><br/>
  <% end %>

	<!-- Notification for Staff Leave is approved -->
	<% asl = Leaveforstaff.find(:all, :select => "leavestartdate", :conditions => ['staff_id=? AND approval1 =? AND approver2 =? AND leavestartdate >?', Login.current_login.staff_id, true, true, DateTime.now]).map(&:leavestartdate) %>
	<% if asl.size > 0 %>
		<%= link_to (t 'notifications.leave_request_for')+" #{asl} "+(t 'notifications.has_been_approved'), { :controller => "leaveforstaffs", :action => "index" } %><br/>
	<% end %>

	<!-- Notification for Staff Late Approval -->
  <% dash_attendance = StaffAttendance.count(:all, :conditions => ['approved_by =? AND is_approved IS ?', Login.current_login.staff_id, nil]) %>
  <% if dash_attendance == 0 %>
  <% else %>
    <%= link_to "#{dash_attendance} "+(t 'notifications.late_early_for_approval'), { :controller => "staff_attendances", :action => "manage" } %><br>
  <% end %>
<% if Login.current_login.staff  %>
 	<!--Notifications for Late/Early - require management-->
	<% unless Login.current_login.staff.position.blank?  %><!--15Jul2013-added-->
	<%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%><!--15Jul2013-added-->

	<% lateearly = StaffAttendance.count(:all, :conditions => ["trigger=? AND reason IS NULL AND thumb_id=?", true, Login.current_login.staff.thumb_id]) %>
	<% if lateearly > 0 %>
	   <%= link_to "#{lateearly} "+(t 'notifications.late_early_require_reason'), { :controller => 'staff_attendances', :action => 'manage' } %><br>
	<% else %>
	<% end %>

	<% end %><!--15Jul2013-added-->
	<%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%><!--15Jul2013-added-->
<% end %>
	<!-- Notification for travel request -->
	<% trvlreqst = TravelRequest.count(:all, :conditions => ['hod_id = ? AND hod_accept IS ?', Login.current_login.staff_id, nil]) %>
	<% if trvlreqst > 0 %>
		<%= link_to "#{trvlreqst} "+(t 'notifications.travel_request_require_approval'), { :controller => "travel_requests", :action => "index" } %><br/>
	<% end %>

	<% trvlreqst_approved = TravelRequest.count(:all, :conditions => ['staff_id = ? AND hod_accept = ? AND hod_accept_on < ?', Login.current_login.staff_id, true, Date.today + 3.days]) %>
	<% if trvlreqst_approved > 0 %>
		<%= link_to "#{trvlreqst_approved} "+(t 'notifications.travel_request_approved'), { :controller => "travel_requests", :action => "index" } %><br/>
	<% end %>

	<!-- Notification on Asset Defect -->

	<% asset_with_defects = AssetDefect.count(:all, :conditions => ['is_processed IS ? AND processed_by IS ? AND decision_by !=?', nil, nil, Login.current_login.staff_id ]) %>
	<% if asset_with_defects > 0 %>
		<%= link_to "#{asset_with_defects} "+(t 'notifications.defect_require_processing'), { :controller => "asset_defects", :action => "index" } %><br/>
	<% end %>

	<% defect_action_for_approval = AssetDefect.count(:all, :conditions => ['is_processed = ? AND decision_by =? AND decision IS ?', true, Login.current_login.staff_id, nil]) %>
	<% if defect_action_for_approval > 0 %>
		<%= link_to "#{defect_action_for_approval}"+(t 'notifications.defect_for_decision'), { :controller => "asset_defects", :action => "index" } %><br/>
	<% end %>

	<!-- Notification on Losses -->
	<%# permitted_to? :manage, :assets do %>
	<%# if Login.current_login.staff.position.code == "1" %><!-- :endorsed_hod_by =>:is_submit_to_hod => true-->
	<%# loss_require_endorse = AssetLoss.count(:all, :conditions => ['is_submit_to_hod = ? AND endorsed_on IS ?', true, nil ]) %>
	<%# loss_require_endorse =AssetLoss.count(:all, :conditions=>['is_submit_to_hod=? AND endorsed_hod_by=?', true, Login.current_login.staff_id]) %>
	<% loss_require_endorse =AssetLoss.count(:all, :conditions=>['endorsed_hod_by=?', Login.current_login.staff_id]) %>
	<% if loss_require_endorse > 0 %>
		<%= link_to "#{loss_require_endorse} "+(t 'notifications.asset_losses_require_verify'), { :controller => "asset_losses", :action => "index" } %><br/>
	<% end %>
	<%# end -%>
	<%# end %>


	<!-- Notification on Asset Disposal -->
	<% disposal_require_verify = AssetDisposal.count(:all, :conditions => ['is_checked = ? AND (is_verified = ? OR is_verified is null) AND verified_by =?', true, false, Login.current_login.staff_id ]) %>
	<% if disposal_require_verify > 0 %>
		<%= link_to "#{disposal_require_verify} "+(t 'notifications.asset_disposals_require_verify'), { :controller => "asset_disposals", :action => "index" } %><br/>
	<% end %>


	<!--Notification for Asset Loan-->

<% unless Login.current_login.staff.blank? %>
	<%#****special case for PA Pengarah%****%>
	<% if Login.current_login.staff.id != 101 %>
	<%#**************************************%>

	<% unless Login.current_login.staff.position.blank?  %><!--15Jul2013-added-->
	<%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%><!--15Jul2013-added-->
	<!--25Apr2013-check if ANY OF logged-in unit members of DEPT/UNIT same as loaned_by(asset owner); HAVE request of asset loan that still pending-->
	<% hods = [6,7,8,9,10,11,12,13,14,15,16,17,18,19,25,26,27,28,29,30,31] %>
	<% logged_login_positionid=Login.current_login.staff.position.id %>
	<% assetloanrequest2=[]%>
	<% unless hods.include?(logged_login_positionid)%><!--NOT HOD-->
		<% unit_members=[]%>
		<% if current_login.staff.position.is_root? %>
		<% else %>
			<% superior = Position.find(:first,:conditions=>['staff_id=?',current_login.staff_id]).parent.staff_id %>
	  	<% end %>
		<% subordinates = Position.find(:first,:conditions=>['staff_id=?',current_login.staff_id]).siblings %>
	  	<% unit_members << superior if superior != nil %>
		<% subordinates.each do |x| %>
			<% unit_members << x.staff_id if x.staff_id !=nil %>
		<% end %><!--
		<%#=current_login.staff_id%>~
		<%#=unit_members %>-->

		<% 0.upto(unit_members.count-1) do |index|%>
			<% assetloanrequest3 = AssetLoan.count(:all, :conditions => ['loaned_by = ? AND is_approved IS NULL', unit_members[index]])%>
			<% if assetloanrequest3 > 0 %>
				<% assetloanrequest2 << assetloanrequest3 %>
			<% end %>
		<% end %>
		<% assetloanrequest2[0]=0 if assetloanrequest2[0].blank? %>
	<% else %>
		<% assetloanrequest2[0]=0%>
	<% end %>

	<!--25Apr2013-check if ANY OF logged-in unit members of DEPT/UNIT same as loaned_by(asset owner); HAVE request of asset loan that still pending-->

	<!--25Apr2013-to notify user for not yet return on-loan asset on due date (expected_on)-->
	<% assetloan_due = AssetLoan.count(:all, :conditions =>['is_approved IS true AND is_returned IS NULL AND staff_id=? AND expected_on<=?',Login.current_login.staff_id,Date.today])
	%>
	<% if assetloan_due > 0 %>
		<%= link_to "#{assetloan_due} "+(t 'notifications.asset_loan_due'), { :controller => "asset_loans", :action => "index" } %><br/>
	<% end %>
	<!--25Apr2013-to notify user for not yet return on-loan asset on due date (expected_on)-->

	<!--25Apr2013-asset loan request for processing-->
	<% assetloanrequest = AssetLoan.count(:all, :conditions => ['loaned_by = ? AND is_approved IS NULL', Login.current_login.staff_id]) %>
	<% if assetloanrequest > 0 %>
		<%#= link_to "#{assetloanrequest} "+(t 'notifications.asset_loan_for_approval'), { :controller => "asset_loans", :action => "index" } %><br/>
	<% end %>
	<% if assetloanrequest2[0] > 0 && assetloanrequest==0 %>
	<!--assetloanrequest giving 0, when logged-in as OTHER unit member of loaned_by's unit/dept-->
		<%#= link_to "#{assetloanrequest2} "+(t 'notifications.asset_loan_for_approval'), { :controller => "asset_loans", :action => "index" } %><br/>
	<% end %>
	<!--25Apr2013-asset loan request for processing-->

	<!--25Apr2013-notify HOD on approval of asset loan regardless of loantype (internal or external) -->
	<% assetnotify_hod = AssetLoan.count(:all, :conditions=>['is_approved IS true AND is_returned IS NOT true AND hod=?',Login.current_login.staff_id]) %>
	<% if assetnotify_hod > 0 %>
		<% if Login.current_login.staff.position.root %>
			<%= link_to "#{assetnotify_hod} "+(t 'notifications.asset_loan_require_final_approval'), { :controller => "asset_loans", :action => "index" } %><br/>
		<% else %>
			<%= link_to "#{assetnotify_hod} "+(t 'notifications.asset_loan_approved_fyi'), { :controller => "asset_loans", :action => "index" } %><br/>
		<% end %>
	<% end %>
	<!--25Apr2013-notify HOD on approval of asset loan regardless of loantype (internal or external) -->

	<%#=AssetLoan.count(:all, :conditions=>['is_approved IS true AND is_returned IS NOT true AND hod=?',Login.current_login.staff_id])%><%#=current_login.staff_id%>


<% end %><!--end for unless Login.current_login.staff.blank?-->
	<%#****special case for PA Pengarah%****%>

	<% end %><!--15Jul2013-added-->
	<%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%><!--15Jul2013-added-->

	<% end %>
	<%#**************************************%>

	<!--END-Notification for Asset Loan-->

	<!-- Notification for Messages -->
  <% dash_messages = Message.count(:all, :include => :staffs, :conditions => ['staff_id =? AND messages.created_at > ?' , Login.current_login.staff_id, DateTime.now - 1.day]) %>
  <% if dash_messages == 0 %>

  <% else %>
    <%= dash_messages %> <%= link_to (t 'notifications.new_messages'), { :controller => "messages", :action => "index" } %><br>
  <% end %>

  <!-- Notification for Student Leave Approval -->
  <% if Login.current_login.isstaff && Login.current_login.staff.position!=nil%>
  <!--group coordinator-->
  <% if permitted_to? :approve_coordinator, :leaveforstudents %>
	<% c1 = Login.find(:all, :select => "id", :conditions => ['roles.id =?',14 ], :include => :roles).map(&:id) %>
	<% d1 = Array(Login.current_login.id) %>
	<% a = Leaveforstudent.find(:all, :conditions => ["studentsubmit =? AND approved IS ? AND leave_startdate >=?", true, nil, Date.tomorrow]) %>
	<% dash_lfs1 = Leaveforstudent.count(:all, :conditions => ["studentsubmit =? AND approved IS ? AND leave_startdate >=?", true, nil, Date.tomorrow]) %>
	<!--hack : restrict warden fr becoming 'coordinator' if warden also a lecturer UNLESS this warden/lecturer is Penyelaras for this student leave-->
	<% unless Login.current_login.staff.position.nil?%>
		<% maintask=Login.current_login.staff.position.tasks_main %>
		<% unitstaff=Login.current_login.staff.try(:position).try(:unit) %>
		<% coor=maintask[/Penyelaras Kumpulan \d{1,}/] %>
		<% if !coor.nil? && !unitstaff.nil? %>
			<% group_coor=coor.split(" ")[2] %>
			<% stu_ids=Leaveforstudent.all.map(&:student_id)%>
			<% intake_date=Student.find(stu_ids).map(&:intake)%>
			<% intt=[] %>
			<% intake_date.each{|ii| intt << ii.beginning_of_month}%>
			<% prog_id=Programme.find(:first, :conditions =>['name ILIKE(?) and ancestry_depth=?', unitstaff,0])%>
			<% intake_monthyear=Intake.find(:all, :conditions => ['programme_id=? and monthyear_intake IN(?)', prog_id, intt])%>
			<% group_intake=intake_monthyear.map(&:description) unless intake_monthyear.nil?%>
			<% @is_coordinator=true if group_intake && group_intake.include?(group_coor)%>
		<% end %>
	<% end %>
	<!--hack-end-redundant auth rules...-->

	<%# if (Login.current_login.roles.map(&:id).include?(7)==false|| (Login.current_login.roles.map(&:id).include?(7)==true && @is_coordinator==true))%>
	<%# if (Login.current_login.roles.map(&:id).include?(7)==false|| (Login.current_login.roles.map(&:id).include?(7)==true && Intake.all.map(&:staff_id).include?(Login.current_login.staff_id)))	%>
		<%# dash_lfs1b=Leaveforstudent.find(:all, :conditions =>['student_id IN(?) and id IN(?)', Login.current_login.staff.under_my_supervision.map(&:id).uniq, a.map(&:id).uniq]).count %>
	<%# end %>
	<!--admin may get duplicates, as admin can edit both approved & approved2, note : uniq-->

  <% end %>
  <!--warden-->
  <% if permitted_to? :approve_warden, :leaveforstudents %>
	<% unless @is_coordinator==true %>
		<% c2 = Login.find(:all, :select => "id", :conditions => ['roles.id =?',7 ], :include => :roles).map(&:id) %>
		<% d2 = Array(Login.current_login.id) %>
		<% b = Leaveforstudent.find(:all, :conditions => ["studentsubmit =? AND approved2 IS ? and leave_startdate >=?", true, nil, Date.tomorrow]) %>
		<% dash_lfs2 = Leaveforstudent.count(:all, :conditions => ["studentsubmit =? AND approved2 IS ? and leave_startdate >=?", true, nil, Date.tomorrow]) %>
	<% end %>
   <% end %>

	<% if Login.current_login.roles.map(&:id).include?(2)==true %>
		<% if (a + b).uniq.count > 0 %>
			<%= link_to "#{(a + b).uniq.count} "+(t 'notifications.student_leave_for_approval'), { :controller => "leaveforstudents", :action => "index" } %><br/>
		<% end %>
	<% else %>
		<% if (d2 & c2 == d2) && dash_lfs2 > 0 %>
			<%= link_to "#{dash_lfs2} "+(t 'notifications.student_leave_for_approval'), { :controller => "leaveforstudents", :action => "index" } %><br/>
		<% elsif (d1 & c1 == d1) && dash_lfs1b  && dash_lfs1b > 0%>
			<%= link_to "#{dash_lfs1b} "+(t 'notifications.student_leave_for_approval'), { :controller => "leaveforstudents", :action => "index" } %><br/>
		<% end %>
	<% end %>

  <% end %>


	<!-- Notification for Documents-->
	<!-- Case for CC1 -->
	<% mycc1docs = Document.count(:all, :conditions => ["cc1staff_id=? AND cc1closed IS ?", Login.current_login.staff_id, nil]) %>
	<% mycc2docs = Document.count(:all, :conditions => ["cc2staff_id=? AND cc2closed IS ?", Login.current_login.staff_id, nil]) %>
	<% mydocs = mycc1docs + mycc2docs %>
  <% if mydocs > 0 %>
  	<%= link_to "#{mydocs} "+(t 'notifications.documents_attention'), { :controller => "documents", :action => "index" } %><br>
  <% else %>
	<% end %>

	<!-- Notification for Students Leave is approved -->
	<% al = Leaveforstudent.find(:all, :select => "leave_startdate", :conditions => ['student_id=? AND approved =? AND leave_startdate >?', Login.current_login.student_id, true, DateTime.now], :order => 'leave_startdate ASC').map(&:leave_startdate) %>
	<% alc = Leaveforstudent.count(:all, :select => "leave_startdate", :conditions => ['student_id=? AND approved =? AND approved2=? AND leave_startdate >?', Login.current_login.student_id, true, true, DateTime.now]) %>
	<% if alc > 0 %>
		<%= link_to (t 'notifications.leave_request_for')+" #{al[0].strftime('%d-%m-%Y')} "+(t 'notifications.has_been_approved'), { :controller => "leaveforstudents", :action => "index" } %><br/>
	<% end %>

<% permitted_to? :manage, :student_counseling_sessions do %><!--1Apr2013-->
	<% counsel_appt = StudentCounselingSession.count(:all, :conditions => ['is_confirmed !=? OR is_confirmed ISNULL', true])%>
	<%# counsel_appt = StudentCounselingSession.count(:all, :conditions => ['is_confirmed !=?', true])%>
	<%# counsel_appt = StudentCounselingSession.count(:all, :conditions => ['is_confirmed IS ?', nil])%>
	<% if counsel_appt > 0 %>
		<%= link_to "#{counsel_appt} "+(t 'notifications.counselling_appt_to_confirm'), { :controller => "student_counseling_sessions", :action => "index" } %><br/>
	<% end %>
<% end %><!--1Apr2013-->

<!-- Notification for Students Dicsipline "NEW" for KP, "Refer to TPHEP"(referred case) for TPHEP -->

	<% cases = StudentDisciplineCase.count(:all, :conditions => ['status =? AND assigned_to=?', "New",Login.current_login.staff_id]) %>
	<% referredcases = StudentDisciplineCase.count(:all, :conditions => ['status =? AND assigned2_to=?', "Refer to TPHEP",Login.current_login.staff_id ])%><!--TPHEP=staff at position id=3-->
	<% feedbacks = StudentDisciplineCase.count(:all, :conditions => ['counselor_feedback IS NOT NULL AND counselor_feedback!=? AND assigned2_to=?' ,'',Login.current_login.staff_id]) %>
	<% if cases > 0 %>
		<%= link_to "#{cases} "+(t 'notifications.new_discipline_case'), student_discipline_cases_path %><br>
	<% end %>
	<% if referredcases > 0 %>
 		<%= link_to "#{referredcases} "+(t 'notifications.referred_cases'), student_discipline_cases_path %><br>
	<% end %>
	<% if feedbacks > 0 %>
 		<%= link_to "#{feedbacks} "+(t 'notifications.counsellor_feedback'), student_discipline_cases_path %><br>
	<% end %>

	<!-- Notification for Topic Approval
	<#% topic_need_approve = Topic.count(:all, :conditions => ['approvedby_id=? AND approved =?', Login.current_login.staff_id, false]) %>
		<#% if topic_need_approve == 0 %>
		<#% else %>
			<#%= topic_need_approve %> <#%= link_to "Lesson plan topics need your approval", topics_path %><br>
		<#% end %>-->

	<!-- Notification for Training Plan Report-->
	<% report_need_comment = Trainingreport.count(:all, :conditions => ['tpa_id=? AND tpa_comment IS ?', Login.current_login.staff_id, nil]) %>
		<% if report_need_comment == 0 %>
		<% else %>
			<%= link_to "#{report_need_comment} "+(t 'notifications.lesson_report_for_comment'), trainingreports_path %><br>
		<% end %>




	<!-- Notification for New Login -->
	<% permitted_to? :manage, :logins do %>
		<% users_wo_roles = Login.count(:all, :select => "id", :conditions => ["student_id IS? AND staff_id IS ?", nil, nil]) %>
		<% if users_wo_roles == 0 %>
		<% else %>
			<%= link_to "#{users_wo_roles} "+(t 'notifications.new_users_authenticate'), logins_path %><br/>
		<% end %>
	<% end %>




	<!-- Overdue Library Books for Staff -->
	<% latestaff = Librarytransaction.count(:all, :conditions => ["staff_id=? AND returnduedate < ? AND returneddate IS ?", Login.current_login.staff_id, Time.now, nil]) %>
	<% if latestaff > 0 %>
	   <%= link_to "#{latestaff} "+(t 'notifications.late_books'), { :controller => "librarytransactions", :action => "index" } %><br>
	<% else %>
	<% end %>

	<!--Notification for Document Registry-->

	<%# tome = Document.find(:all, :joins => :staffs, :conditions => ['staff_id =?', Login.current_login.staff_id," "], :order => "created_at DESC").count %>
	<%# tome = Document.find(:all, :joins => :circulations, :conditions => ['circulations.staff_id =? and circulations.action_taken=?', Login.current_login.staff_id," "], :order => "created_at DESC").count %>

	<% tomedoc = Document.find(:all, :joins => :staffs, :conditions => ['staffs.id=?',Login.current_login.staff_id]).map(&:id)%>
	<% tome = Circulation.find(:all, :conditions=>['document_id IN(?) and staff_id=? and (action_taken=? or action_taken is null)', tomedoc, Login.current_login.staff_id,""]).count%>
	<% if tome > 0 %>
		<%= link_to "#{tome} "+(t 'notifications.document_require_attention'), {:controller => "documents", :action => "index"} %><br>
	<% else %>
	<% end %>
<!-- 	<br> -->

	<%# @documents=Document.all%>
	<%# @a_creator=[]%>
	<%# @a_filled=[]%>
	<%# @documents.each do |x|%>
		<%# @a_creator << x.prepared_by %>
		<%# @a_filled << x.stafffiled_id %>
	<%# end %>

	<% permitted_to? :manage, :documents do %>
		<%# if (@a_creator.include? Login.current_login.staff_id) || (@a_filled.include? Login.current_login.staff_id) %>
			<%# documents = Document.count(:all, :conditions => ["closed !=?",true]) %>
			<% @admin = Login.current_login.roles.map(&:id).include?(2) %>
			<% documents = Document.count(:all, :conditions => ["closed!=? AND (stafffiled_id=? or prepared_by=? )",true, Login.current_login.staff_id,Login.current_login.staff_id]) %>
			<%# if @admin==true%><!---to rev:ogma-->
					<%# documents = Document.count(:all, :conditions => ["closed!=?",true]) %>
			<%# end %>
			<% if documents == 0 %>
			<% else %>
				<%= link_to "#{documents} "+(t 'notifications.document_require_attention'), documents_path %><br/>
			<% end %>
		<%# end %>
	<% end %>



</p>

</div>
